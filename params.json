{"name":"OpinionatedC","tagline":"Because Objective-C should have inherited more from Smalltalk","body":"Undoubtedly, Objective-C has been influenced significantly by Smalltalk. Unfortunately, the forefathers of \r\nObjective-C stopped inheriting concepts where stuff gets really interesting (and a pleasure to work with).\r\n\r\nOpinionatedC is here to fix that.\r\n\r\nNote: This library is pretty much a work in progress. However, it is well tested and already used in production\r\nas well as in App Store submitted apps.\r\n\r\n## Usage\r\nThe easiest way to include OpinionatedC into your project is through [CocoaPods](http://cocoapods.org/):\r\n```\r\npod 'OpinionatedC'\r\n```\r\nImport the umbrella header everywhere you want to taste the sweetness of OpinionatedC:\r\n```objectivec\r\n#import <OpinionatedC/OpinionatedC.h>\r\n```\r\n\r\n## Features\r\n* [**Collections**](https://github.com/leoschweizer/OpinionatedC#collections) (`NSArray`, `NSDictionary`, `NSSet`, `NSString`, ...)\r\n  * [Aggregating](https://github.com/leoschweizer/OpinionatedC#aggregating)\r\n    * [`average`](https://github.com/leoschweizer/OpinionatedC#aggregating) / [`average:`](https://github.com/leoschweizer/OpinionatedC#aggregating)\r\n    * [`count:`](https://github.com/leoschweizer/OpinionatedC#aggregating)\r\n    * [`groupedBy:`](https://github.com/leoschweizer/OpinionatedC#aggregating)\r\n\t* [`max`](https://github.com/leoschweizer/OpinionatedC#aggregating) / [`max:`](https://github.com/leoschweizer/OpinionatedC#aggregating)\r\n\t* [`min`](https://github.com/leoschweizer/OpinionatedC#aggregating) / [`min:`](https://github.com/leoschweizer/OpinionatedC#aggregating)\r\n\t* [`sum`](https://github.com/leoschweizer/OpinionatedC#aggregating) / [`sum:`](https://github.com/leoschweizer/OpinionatedC#aggregating)\r\n  * [Enumerating](https://github.com/leoschweizer/OpinionatedC#enumerating)\r\n    * [`each:`](https://github.com/leoschweizer/OpinionatedC#enumerating) / [`eachWithIndex:`](https://github.com/leoschweizer/OpinionatedC#enumerating)\r\n    * [`each:separatedBy:`](https://github.com/leoschweizer/OpinionatedC#enumerating) / [`eachWithIndex:separatedBy:`](https://github.com/leoschweizer/OpinionatedC#enumerating)\r\n    * [`isEmpty`](https://github.com/leoschweizer/OpinionatedC#enumerating) / [`isNotEmpty`](https://github.com/leoschweizer/OpinionatedC#enumerating)\r\n  * [Mapping](https://github.com/leoschweizer/OpinionatedC#mapping)\r\n    * [`collect:`](https://github.com/leoschweizer/OpinionatedC#mapping) / [`map:`](https://github.com/leoschweizer/OpinionatedC#mapping)\r\n    * [`inject:into:`](https://github.com/leoschweizer/OpinionatedC#mapping) / [`reduce:`](https://github.com/leoschweizer/OpinionatedC#mapping)\r\n  * [Subsetting](https://github.com/leoschweizer/OpinionatedC#subsetting)\r\n    * [`allSatisfy:`](https://github.com/leoschweizer/OpinionatedC#subsetting) / [`anySatisfy:`](https://github.com/leoschweizer/OpinionatedC#subsetting) \r\n\t* [`first`](https://github.com/leoschweizer/OpinionatedC#subsetting) / [`first:`](https://github.com/leoschweizer/OpinionatedC#subsetting)\r\n    * [`detect:`](https://github.com/leoschweizer/OpinionatedC#subsetting) / [`reject:`](https://github.com/leoschweizer/OpinionatedC#subsetting) / [`select:`](https://github.com/leoschweizer/OpinionatedC#subsetting)\r\n\t* [`dropWhile:`](https://github.com/leoschweizer/OpinionatedC#subsetting) / [`takeWhile:`](https://github.com/leoschweizer/OpinionatedC#subsetting)\r\n* [**Error Handling**](https://github.com/leoschweizer/OpinionatedC#error-handling)\r\n  * [`SubclassResponsibility`](https://github.com/leoschweizer/OpinionatedC#error-handling)\r\n  * [`UnsupportedOperation`](https://github.com/leoschweizer/OpinionatedC#error-handling) / [`ShouldNotOccur`](https://github.com/leoschweizer/OpinionatedC#error-handling)\r\n  * [`NotYetImplemented`](https://github.com/leoschweizer/OpinionatedC#error-handling)\r\n  * [`Error()`](https://github.com/leoschweizer/OpinionatedC#error-handling)\r\n* [**NSDictionary Extensions**](https://github.com/leoschweizer/OpinionatedC#nsdictionary-extensions)\r\n  * [`add:`](https://github.com/leoschweizer/OpinionatedC#nsdictionary-extensions) ยน\r\n  * [`associationEnumerator`](https://github.com/leoschweizer/OpinionatedC#nsdictionary-extensions)\r\n  * [`at:`](https://github.com/leoschweizer/OpinionatedC#nsdictionary-extensions) / [`at:ifAbsent:`](https://github.com/leoschweizer/OpinionatedC#nsdictionary-extensions) / [`at:ifPresent:`](https://github.com/leoschweizer/OpinionatedC#nsdictionary-extensions)\r\n  * [`at:put:`](https://github.com/leoschweizer/OpinionatedC#nsdictionary-extensions) ยน / [`at:ifAbsentPut:`](https://github.com/leoschweizer/OpinionatedC#nsdictionary-extensions) ยน\r\n  * [`includesKey:`](https://github.com/leoschweizer/OpinionatedC#nsdictionary-extensions) / [`includesValue:`](https://github.com/leoschweizer/OpinionatedC#nsdictionary-extensions)\r\n* [**NSNumber Extensions**](https://github.com/leoschweizer/OpinionatedC#nsnumber-extensions)\r\n  * [`atRandom`](https://github.com/leoschweizer/OpinionatedC#nsnumber-extensions)\r\n  * [`timesRepeat:`](https://github.com/leoschweizer/OpinionatedC#nsnumber-extensions) / [`timesRepeatWithIndex:`](https://github.com/leoschweizer/OpinionatedC#nsnumber-extensions)\r\n  * [`to:`](https://github.com/leoschweizer/OpinionatedC#nsnumber-extensions) / [`to:by:`](https://github.com/leoschweizer/OpinionatedC#nsnumber-extensions)\r\n* [**NSObject Extensions**](https://github.com/leoschweizer/OpinionatedC#nsobject-extensions)\r\n  * [`asAssociationWithValue:`](https://github.com/leoschweizer/OpinionatedC#nsobject-extensions) / [`asAssociationWithKey:`](https://github.com/leoschweizer/OpinionatedC#nsobject-extensions)\r\n  * [`isNull`](https://github.com/leoschweizer/OpinionatedC#nsobject-extensions) / [`isNotNull`](https://github.com/leoschweizer/OpinionatedC#nsobject-extensions)\r\n\r\nยน Extension is only available on mutable instances\r\n\r\n#### Collections\r\nMost of the collection extensions are implemented on the `NSObject` level, with refined behavior for different \r\ncollection types. Non-collection objects thereby behave like collections with a single element, and `[NSNull null]`\r\nbehaves like an empty collection.\r\n\r\nOpinionatedC tries it's best to preserve the types you are operating on. Calling `select:` on an (immutable) `NSArray`\r\nwill yield an instance of `NSArray`. Likewise, doing the same on an `NSMutableArray` instance will yield a mutable\r\narray. However, this behavior is limited by the type system of Objective-C (for instance, this does not work\r\nat all with `NSString`s).\r\n\r\n##### Aggregating\r\n```objectivec\r\n\r\n[@[@2, @4] average]\r\n// => @3\r\n\r\n[@[@\"hello\", @\"world!\"] average:^NSNumber*(id each) { \r\n    return @([each length]);\r\n}]\r\n// => @5.5\r\n\r\n[@[@\"a\", @5, @YES, @\"b\"] count:^BOOL(id each) {\r\n    return [each isKindOfClass:NSString.class];\r\n}];\r\n// => 2\r\n\r\nNSSet *set = [NSSet setWithObjects:@\"foo\", @\"bar\", @\"hello\", @\"world!\", nil];\r\n[set groupedBy:^id(id each) {\r\n    return @([each length]);\r\n}];\r\n// => @{\r\n//        @3 : a NSSet(@\"foo\", @\"bar\"),\r\n//        @5 : a NSSet(@\"hello\"),\r\n//        @6 : a NSSet(@\"world!\")\r\n//    }\r\n\r\n[[@1, @2, @3] max]\r\n// => @3\r\n\r\n[@[@\"hello\", @\"world!\"] max:^NSNumber*(id each) { \r\n    return @([each length]);\r\n}]\r\n// => @\"world!\"\r\n\r\n[@[@1, @2, @3] min]\r\n// => @1\r\n\r\n[@[@\"hello\", @\"world!\"] min:^NSNumber*(id each) { \r\n    return @([each length]);\r\n}]\r\n// => @\"hello\"\r\n\r\n[@[@1, @2, @3] sum]\r\n// => @6\r\n\r\n[@[@\"hello\", @\"world!\"] sum:^NSNumber*(id each) { \r\n    return @([each length]);\r\n}]\r\n// => @11\r\n\r\n\r\n```\r\n\r\n##### Enumerating\r\n```objectivec\r\n\r\n[@[@\"foo\", @\"bar\"] each:^(NSString *each) {\r\n    NSLog(@\"%@\", each);\r\n}];\r\n// => foo\r\n// => bar\r\n\r\n[@[@\"foo\", @\"bar\"] \r\n    each:^(NSString *each) {\r\n        NSLog(@\"%@\", each);\r\n    }\r\n    separatedBy:^{\r\n        NSLog(@\"w00t\");\r\n    }];\r\n// => foo\r\n// => w00t\r\n// => bar\r\n\r\n[@\"abc\" eachWithIndex:^(NSString *each, NSUInteger idx) {\r\n    NSLog(@\"%@ - %@\", each, @(idx));\r\n}];\r\n// => a - 0\r\n// => b - 1\r\n// => c - 2\r\n\r\n[@[@\"a\", @\"b\", @\"c\"] isEmpty];\r\n// => NO\r\n\r\n[@\"\" isEmpty];\r\n// => YES\r\n\r\n```\r\n\r\n##### Mapping\r\n```objectivec\r\n[@[@1, @2, @3] map:^id(NSNumber *each) {\r\n    return @([each integerValue] * 2);\r\n}];\r\n// => @[@2, @4, @6]\r\n\r\n[@\"hello world\" map:^id(NSString *each) { \r\n    return [each capitalizedString];\r\n}];\r\n// => @\"HELLO WORLD\"\r\n\r\n[@{ @1 : @YES } map:^id(OCAssociation *each) { \r\n    return [each.key asAssociationWithValue:@NO];\r\n}];\r\n// => @{ @1 : @NO }\r\n\r\n[@[@1, @2, @3] inject:@0 into:^id(NSNumber *running, NSNumber *each) {\r\n    return @([running integerValue] + [each integerValue]);\r\n}];\r\n// => @6\r\n```\r\n\r\n##### Subsetting\r\n```objectivec\r\n[@[@1, @2, @3, @4] allSatisfy:^BOOL(NSNumber *each) {\r\n    return [each integerValue] % 2 == 0;\r\n}];\r\n// => NO\r\n\r\n[@\"abcdef\" anySatisfy:^BOOL(NSString *each) { \r\n    return [each isEqualToString:@\"f\"];\r\n}];\r\n// => YES\r\n\r\n[@\"abcdef\" first:3]\r\n// => @\"abc\"\r\n\r\n[@{ @1 : @\"foo\", @2 : @\"bar\"} detect:^BOOL(OCAssociation *each) {\r\n    return [each.key isEqualToNumber:@2];\r\n}];\r\n// => an OCAssociation(@2, @\"bar\")\r\n\r\n[@{ @1 : @\"foo\", @2 : @\"bar\"} select:^BOOL(OCAssociation *each) {\r\n    return [each.key isEqualToNumber:@2];\r\n}];\r\n// => @{ @2 : @\"bar\" }\r\n\r\n[@{ @1 : @\"foo\", @2 : @\"bar\"} reject:^BOOL(OCAssociation *each) {\r\n    return [each.key isEqualToNumber:@2];\r\n}];\r\n// => @{ @1 : @\"foo\" }\r\n\r\n[@[@2, @4, @6, @8, @10, @11, @12] dropWhile:^BOOL(id each) {\r\n    return [each integerValue] % 2 == 0;\r\n}];\r\n// => @[@11, @12]\r\n\r\n[@[@1, @2, @3, @4, @5] takeWhile:^BOOL(id each) {\r\n    return [each integerValue] <= 3;\r\n}];\r\n// => @[@1, @2, @3]\r\n\r\n```\r\n\r\n#### Error Handling\r\n```objectivec\r\n@implementation MyAbstractClass\r\n\r\n- (NSString *)abstractMethod {\r\n    SubclassResponsibility;\r\n}\r\n\r\n- (BOOL)methodThatShouldBeImplemented {\r\n    NotYetImplemented;\r\n}\r\n\r\n- (void)unsupportedMethodFromSuperclass {\r\n    UnsupportedOperation;\r\n}\r\n\r\n- (NSNumber *)methodWithArg:(NSUInteger)arg {\r\n    \r\n    switch (arg) {\r\n        case 1: return @1;\r\n        case 2: return @2;\r\n    }\r\n    \r\n    ShouldNotOccur;\r\n    \r\n}\r\n\r\n- (NSUInteger)method2WithArg:(NSUInteger)arg {\r\n    if (arg < 10) {\r\n        return 10;\r\n    }\r\n    if (arg < 20) {\r\n        return 20;\r\n    }\r\n    Error(@\"arg must be smaller than 20\");\r\n}\r\n\r\n@end\r\n```\r\n\r\n\r\n#### NSDictionary Extensions\r\n```objectivec\r\nNSMutableDictionary *dict = [NSMutableDictionary dictionary];\r\n\r\n[dict add:[@1 asAssociationWithValue:@\"foo\"]];\r\n// => @{ @1 : @\"foo\" }\r\n\r\n[dict at:@1 put:@\"foo\"];\r\n// => @{ @1 : @\"foo\" }\r\n\r\n[dict at:@2 ifAbsent:^id{\r\n    return @\"bar\";\r\n}];\r\n// => @\"bar\"\r\n\r\n[dict at:@1 ifPresent:^id(id element) {\r\n    return @\"bar\";\r\n}];\r\n// => @\"bar\"\r\n\r\n[dict at:@2 ifAbsentPut:^id{\r\n    return @\"hello world\";\r\n}];\r\n// => @\"hello world\"\r\n\r\n[dict includesKey:@2];\r\n// => YES\r\n\r\n[dict includesValue:@\"bar\"];\r\n// => NO\r\n\r\nfor (OCAssociation *each in [dict associationEnumerator]) {\r\n    NSLog(@\"%@\", each.value);\r\n}\r\n// => foo\r\n\r\n```\r\n\r\n\r\n#### NSNumber Extensions\r\n```objectivec\r\n[@100 atRandom];\r\n// => 77\r\n\r\n[@3 timesRepeat:^{ \r\n   NSLog(@\"hooray!\"); \r\n}];\r\n// => hooray\r\n// => hooray\r\n// => hooray\r\n\r\n__block NSMutableArray *array = [NSMutableArray array];\r\n[@10 timesRepeatWithIndex:^(NSUInteger idx) {\r\n    [array addObject:@(idx)];\r\n}];\r\n// => @[@1, @2, @3, @4, @5, @6, @7, @8, @9, @10]\r\n\r\n[[@5 to:@7] map:^id(NSNumber *each) {\r\n    return @([each integerValue] * 2);\r\n}];\r\n// => @[@10, @12, @14]\r\n\r\n[[@1 to:@10] select:^id(NSNumber *each) {\r\n    return [each integerValue] % 2 == 0;\r\n}];\r\n// => @[@2, @4, @6, @8, @10]\r\n```\r\n\r\n\r\n#### NSObject Extensions\r\n```objectivec\r\n[@\"hello world\" asAssociationWithKey:@1]\r\n// => an OCAssociation(key:@1, value:@\"hello world\")\r\n\r\n[@5 isNull]\r\n// => NO\r\n\r\n[[NSNull null] isNotNull]\r\n// => NO\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}