{"name":"OpinionatedC","tagline":"Because Objective-C should have inherited more from Smalltalk","body":"Sometimes, Objective-C is just overly verbose. Life is too short to `enumerateObjectsUsingBlock` and who has the\r\ntime to create sub-arrays with `filteredArrayUsingPredicate` anyway?\r\n\r\nOpinionatedC is here to fix that. It offers a ton of **Smalltalk-style** convenience extension methods that make\r\nwriting **concise, easily readable** Objective-C code a pleasure.\r\n\r\n# Usage\r\nThe easiest way to include OpinionatedC into your project is through [CocoaPods](http://cocoapods.org/):\r\n```\r\npod 'OpinionatedC'\r\n```\r\nImport the umbrella header everywhere you want to taste the sweetness of OpinionatedC:\r\n```objectivec\r\n#import <OpinionatedC/OpinionatedC.h>\r\n```\r\n\r\n# Features\r\n\r\n## Collection Extensions\r\nCurrently, the collection extensions offered by OpinionatedC are available on all instances of the following classes:\r\n`NSArray`, `NSMutableArray`, `NSDictionary`, `NSMutableDictionary`, `NSSet`, `NSMutableSet`, `NSString`, `NSMutableString`,\r\n`NSMapTable`, `NSHashTable`, `NSPointerArray`.\r\n\r\nThe collection extensions are implemented on the `NSObject` level, with refined behaviour for the different \r\ncollection types. Non-collection objects thereby behave like collections with a single element, and `[NSNull null]`\r\nbehaves like an empty collection.\r\n\r\nOpinionatedC tries it's best to preserve the types you are operating on. Calling `select:` on an (immutable) `NSArray`\r\nwill yield an instance of `NSArray`. Likewise, doing the same on an `NSMutableArray` instance will yield a mutable\r\narray. However, this behaviour is limited by the type system of Objective-C (for instance, this does not work\r\nat all with `NSString` and `NSMutableString`).\r\n\r\n### Aggregation\r\n\r\n#### Average (`average` / `average:`)\r\n```objectivec\r\n[@[@2, @4] average]\r\n// => @3\r\n\r\n[@[@\"hello\", @\"world!\"] average:^NSNumber*(id each) { \r\n    return @([each length]);\r\n}]\r\n// => @5.5\r\n```\r\n\r\n#### Count (`count:`)\r\n```objectivec\r\n[@[@\"a\", @5, @YES, @\"b\"] count:^BOOL(id each) {\r\n    return [each isKindOfClass:NSString.class];\r\n}]\r\n// => 2\r\n```\r\n\r\n#### Group By (`groupedBy:`)\r\n```objectivec\r\nNSSet *set = [NSSet setWithObjects:@\"foo\", @\"bar\", @\"hello\", @\"world!\", nil];\r\n[set groupedBy:^id(id each) {\r\n    return @([each length]);\r\n}];\r\n// => @{\r\n//        @3 : a NSSet(@\"foo\", @\"bar\"),\r\n//        @5 : a NSSet(@\"hello\"),\r\n//        @6 : a NSSet(@\"world!\")\r\n//    }\r\n```\r\n\r\n#### Max (`max` / `max:`)\r\n```objectivec\r\n[[@1, @2, @3] max]\r\n// => @3\r\n\r\n[@[@\"hello\", @\"world!\"] max:^NSNumber*(id each) { \r\n    return @([each length]);\r\n}]\r\n// => @\"world!\"\r\n```\r\n\r\n#### Min (`min` / `min:`)\r\n```objectivec\r\n[@[@1, @2, @3] min]\r\n// => @1\r\n\r\n[@[@\"hello\", @\"world!\"] min:^NSNumber*(id each) { \r\n    return @([each length]);\r\n}]\r\n// => @\"hello\"\r\n```\r\n\r\n#### Sum (`sum` / `sum:`)\r\n```objectivec\r\n[@[@1, @2, @3] sum]\r\n// => @6\r\n\r\n[@[@\"hello\", @\"world!\"] sum:^NSNumber*(id each) { \r\n    return @([each length]);\r\n}]\r\n// => @11\r\n```\r\n\r\n### Enumeration\r\n\r\n#### Each (`each:` / `eachWithIndex:` / `each:separatedBy:` / `eachWithIndex:separatedBy:`)\r\n```objectivec\r\n\r\n[@[@\"foo\", @\"bar\"] each:^(NSString *each) {\r\n    NSLog(@\"%@\", each);\r\n}]\r\n// => foo\r\n// => bar\r\n\r\n[@[@\"foo\", @\"bar\"] \r\n    each:^(NSString *each) {\r\n        NSLog(@\"%@\", each);\r\n    }\r\n    separatedBy:^{\r\n        NSLog(@\"w00t\");\r\n    }]\r\n// => foo\r\n// => w00t\r\n// => bar\r\n\r\n[@\"abc\" eachWithIndex:^(NSString *each, NSUInteger idx) {\r\n    NSLog(@\"%@ - %@\", each, @(idx));\r\n}]\r\n// => a - 0\r\n// => b - 1\r\n// => c - 2\r\n```\r\n\r\n#### Is Empty (`isEmpty` / `isNotEmpty`)\r\n```objectivec\r\n[@[@\"a\", @\"b\", @\"c\"] isEmpty]\r\n// => NO\r\n\r\n[@\"\" isEmpty]\r\n// => YES\r\n\r\n[@\"foo\" isEmpty]\r\n// => NO\r\n```\r\n\r\n### Map / Reduce\r\n\r\n#### Map (`map:` / `collect:`)\r\n```objectivec\r\n[@[@1, @2, @3] map:^id(NSNumber *each) {\r\n    return @([each integerValue] * 2);\r\n}];\r\n// => @[@2, @4, @6]\r\n\r\n[@\"hello world\" collect:^id(NSString *each) { \r\n    return [each capitalizedString];\r\n}];\r\n// => @\"HELLO WORLD\"\r\n\r\n[@{ @1 : @YES } map:^id(OCAssociation *each) { \r\n    return [each.key asAssociationWithValue:@NO];\r\n}];\r\n// => @{ @1 : @NO }\r\n```\r\n\r\n#### Reduce (`inject:into:` / `reduce:`)\r\n```objectivec\r\n[@[@1, @2, @3] inject:@0 into:^id(NSNumber *running, NSNumber *each) {\r\n    return @([running integerValue] + [each integerValue]);\r\n}];\r\n// => @6\r\n\r\n[@[@4, @5, @6] reduce:^id(NSNumber *running, NSNumber *each) {\r\n    return @([running integerValue] * [each integerValue]);\r\n}];\r\n// => @120\r\n```\r\n\r\n### Sub-Collections\r\n\r\n#### All & Any Satisfy (`allSatisfy:` / `anySatisfy:`)\r\n```objectivec\r\n[@[@1, @2, @3, @4] allSatisfy:^BOOL(NSNumber *each) {\r\n    return [each integerValue] % 2 == 0;\r\n}]\r\n// => NO\r\n\r\n[@\"abcdef\" anySatisfy:^BOOL(NSString *each) { \r\n    return [each isEqualToString:@\"f\"];\r\n}]\r\n// => YES\r\n```\r\n\r\n#### First (`first` / `first:`)\r\n```objectivec\r\n[@[@5, @6] first]\r\n// => @5\r\n\r\n[@\"abcdef\" first:3]\r\n// => @\"abc\"\r\n```\r\n\r\n#### Detect (`detect:`)\r\n```objectivec\r\n[@[@2, @3, @4] detect:^BOOL(NSNumber *first) {\r\n    return [each integerValue] % 2 == 0;\r\n}]\r\n// => @2\r\n\r\n[@{ @1 : @\"foo\", @2 : @\"bar\"} detect:^BOOL(OCAssociation *first) {\r\n    return [first.key isEqualToNumber:@2];\r\n}]\r\n// => an OCAssociation(@2, @\"bar\")\r\n```\r\n\r\n#### Select & Reject (`select:` / `reject:`)\r\n```objectivec\r\n[@{ @1 : @\"foo\", @2 : @\"bar\"} select:^BOOL(OCAssociation *each) {\r\n    return [each.key isEqualToNumber:@2];\r\n}]\r\n// => @{ @2 : @\"bar\" }\r\n\r\n[@{ @1 : @\"foo\", @2 : @\"bar\"} reject:^BOOL(OCAssociation *each) {\r\n    return [each.key isEqualToNumber:@2];\r\n}]\r\n// => @{ @1 : @\"foo\" }\r\n```\r\n\r\n#### Drop & Take While (`dropWhile:` / `takeWhile:`)\r\n```objectivec\r\n[@[@2, @4, @6, @8, @10, @11, @12] dropWhile:^BOOL(id each) {\r\n    return [each integerValue] % 2 == 0;\r\n}]\r\n// => @[@11, @12]\r\n\r\n[@[@1, @2, @3, @4, @5] takeWhile:^BOOL(id each) {\r\n    return [each integerValue] <= 3;\r\n}]\r\n// => @[@1, @2, @3]\r\n```\r\n\r\n## Error Handling\r\n```objectivec\r\n@implementation MyAbstractClass\r\n\r\n- (NSString *)abstractMethod {\r\n    SubclassResponsibility;\r\n}\r\n\r\n- (BOOL)methodThatShouldBeImplemented {\r\n    NotYetImplemented;\r\n}\r\n\r\n- (void)unsupportedMethodFromSuperclass {\r\n    UnsupportedOperation;\r\n}\r\n\r\n- (NSNumber *)methodWithArg:(NSUInteger)arg {\r\n    \r\n    switch (arg) {\r\n        case 1: return @1;\r\n        case 2: return @2;\r\n    }\r\n    \r\n    ShouldNotOccur;\r\n    \r\n}\r\n\r\n- (NSUInteger)method2WithArg:(NSUInteger)arg {\r\n    if (arg < 10) {\r\n        return 10;\r\n    }\r\n    if (arg < 20) {\r\n        return 20;\r\n    }\r\n    Error(@\"arg must be smaller than 20\");\r\n}\r\n\r\n@end\r\n```\r\n\r\n## NSDictionary Extensions\r\n```objectivec\r\nNSMutableDictionary *dict = [NSMutableDictionary dictionary];\r\n\r\n[dict add:[@1 asAssociationWithValue:@\"foo\"]];\r\n// => @{ @1 : @\"foo\" }\r\n\r\n[dict at:@1 put:@\"foo\"];\r\n// => @{ @1 : @\"foo\" }\r\n\r\n[dict at:@2 ifAbsent:^id{\r\n    return @\"bar\";\r\n}];\r\n// => @\"bar\"\r\n\r\n[dict at:@1 ifPresent:^id(id element) {\r\n    return @\"bar\";\r\n}];\r\n// => @\"bar\"\r\n\r\n[dict at:@2 ifAbsentPut:^id{\r\n    return @\"hello world\";\r\n}];\r\n// => @\"hello world\"\r\n\r\n[dict includesKey:@2];\r\n// => YES\r\n\r\n[dict includesValue:@\"bar\"];\r\n// => NO\r\n\r\nfor (OCAssociation *each in [dict associationEnumerator]) {\r\n    NSLog(@\"%@\", each.value);\r\n}\r\n// => foo\r\n```\r\n\r\n## NSNumber Extensions\r\n\r\n### Random Number Generation (`atRandom`)\r\n```objectivec\r\n[@100 atRandom]\r\n// => 77\r\n```\r\n\r\n### Repetition (`timesRepeat:` / `timesRepeatWithIndex:`)\r\n```objectivec\r\n[@3 timesRepeat:^{ \r\n   NSLog(@\"hooray!\"); \r\n}]\r\n// => hooray\r\n// => hooray\r\n// => hooray\r\n\r\n__block NSMutableArray *array = [NSMutableArray array];\r\n[@10 timesRepeatWithIndex:^(NSUInteger idx) {\r\n    [array addObject:@(idx)];\r\n}]\r\n// => @[@0, @1, @2, @3, @4, @5, @6, @7, @8, @9]\r\n```\r\n\r\n### Intervals (`to:` / `to:by:`)\r\n```objectivec\r\n[[@5 to:@7] map:^id(NSNumber *each) {\r\n    return @([each integerValue] * 2);\r\n}]\r\n// => @[@10, @12, @14]\r\n\r\n[[@1 to:@10 by:@1] select:^id(NSNumber *each) {\r\n    return [each integerValue] % 2 == 0;\r\n}]\r\n// => @[@2, @4, @6, @8, @10]\r\n```\r\n\r\n## NSObject Extensions\r\n```objectivec\r\n[@\"hello world\" asAssociationWithKey:@1]\r\n// => an OCAssociation(key:@1, value:@\"hello world\")\r\n\r\n[@5 isNull]\r\n// => NO\r\n\r\n[[NSNull null] isNotNull]\r\n// => NO\r\n```\r\n\r\n# License\r\n```\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2015 Leo Schweizer\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n```","google":"UA-69144170-1","note":"Don't delete this file! It's used internally to help with page regeneration."}